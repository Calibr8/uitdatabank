<?php

/**
 * @file
 * Module code.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media_entity\Entity\Media;

define('UITDATABANK_DEFAULT_IMAGE', 'uitdatabank_default_image.jpg');
define('UITDATABANK_IMAGE_DIRECTORY', 'uitdatabank');
// Max page limit is 10000, although not documented.
// @todo: update when /places doesn't return '500' error with pages > 1000.
define('UITDATABANK_API_PAGE_MAX_ITEMS', 1000);

/**
 * Implements hook_entity_view().
 */
function uitdatabank_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // Update canonical on page to UiTdatabank url of the Event.
  if ($entity->getType() == "event_uitdatabank" && node_is_page($entity)) {

    $uri = $entity->get('field_uitdatabank_same_as')->first();
    if ($uri && $uri->getValue()['uri']) {

      foreach ($build['#attached']['html_head_link'] as $index => $item) {
        if ($item[0]['rel'] == 'canonical') {
          $build['#attached']['html_head_link'][$index][0]['href'] = $uri->getValue()['uri'];
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function uitdatabank_form_node_event_uitdatabank_edit_form_alter(array &$form, FormStateInterface $form_state) {

  $form = _uitdatabank_lock_form_node_fields($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function uitdatabank_form_node_organizer_uitdatabank_edit_form_alter(array &$form, FormStateInterface $form_state) {

  $form = _uitdatabank_lock_form_node_fields($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function uitdatabank_form_node_place_uitdatabank_edit_form_alter(array &$form, FormStateInterface $form_state) {

  $form = _uitdatabank_lock_form_node_fields($form);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete related media entities when referencing event/place have been deleted.
 */
function uitdatabank_node_delete(EntityInterface $entity) {

  $media_ids = [];

  switch ($entity->bundle()) {

    case 'event_uitdatabank':
    case 'place_uitdatabank':

      $ids = $entity->get('field_uitdatabank_media')->getValue();

      foreach ($ids as $id) {
        $media_ids[] = $id['target_id'];
      }
      break;
  }

  if ($media_ids) {
    $media_entities = Media::loadMultiple($media_ids);

    foreach ($media_entities as $entity) {
      $entity->delete();
    }
  }
}

/**
 * Lock UiTdatabank and other critical fields on node form (except for user 1).
 *
 * @param array $form
 *   The node form.
 *
 * @return array
 *   The altered form.
 */
function _uitdatabank_lock_form_node_fields(array $form) {

  // Block editing of UiTdatabank fields, but skip for user 1 and if user
  // created the place.
  $current_user = (int) \Drupal::currentUser()->id();
  if ($current_user !== 1 && $current_user !== (int) $form['uid']['widget'][0]['target_id']['#default_value']->id()) {
    foreach ($form as $name => $field) {
      $blocked_fields = [
        'created',
        'langcode',
        'publish_on',
        'status',
        'title',
        'uid',
        'unpublish_on',
      ];

      if (preg_match('/^field_uitdatabank/', $name)) {
        $form[$name]['#disabled'] = TRUE;
      }
      elseif (in_array($name, $blocked_fields)) {
        $form[$name]['#disabled'] = TRUE;
      }
    }
  }

  return $form;
}
